"""This class teaches students how to manage users, groups and permissions in a Linux enviornment.
Topics Covered

Adding and Deleting Users
Editing the passwd File Which Contains User Configurations
Changing User Passwords
Adding and Deleting Groups
Adding and Deleting Users from Groups
Editing the group Configuration File
Understanding Permission Numbering System
Changing User and Group Ownership for Files and Folders
Class Notes"""


Users
Add User = sudo adduser username
Change User password = sudo passwd username
Delete User = sudo userdel username
Edit Users Configuration File = sudo vim /etc/passwd (shows usernames, names of users, home directories)
Groups
Sudo groupadd groupname
Sudo groupdel groupname
Sudo vim /etc/group (shows groups and users)
Permissions
Numbers = owner/group/everyone else
4 = read, 2 = write, 1 = execute
To Chanege Permissions of a File or Folder = sudo chmod 777 file/folder (-R for recursive)
Changing Ownership
To Change User Ownership = sudo chown -R username file/folder
To Change Group Ownership =sudo chgrp --R groupname file/folder
-R for Recursive for Folders


""" This is a resource file to refresh how to correctly use vim editor"""
in terminal shell prompt:$ vimtutor



HOW TO RESET/RECOVER ROOT PASSWORD (RED HAT LINUX)

1. Reboot machine 
When prompt to select OS press 'e'(for edit mode)

2. Locate the kenel line and navigate to the end of the line.
Add 'rd.break' (Ram Disk break)

3. Continue with bootup

4. mount -o remount,rw /sysroot
chroot /sysroot
passwd
typed password twice
touch /.autorelabel
exitï»¿

######################################################################################

How can we change root password
Here are a few ways I can think of, from the least intrusive to the most intrusive.

Without Rebooting
With sudo: if you have sudo permissions to run passwd, you can do:

$ sudo passwd root

Enter your password, then enter a new password for root twice. Done.

Editing files: this works in the unlikely case you don't have full sudo access, but you do have access to edit /etc/{passwd,shadow}. Open /etc/shadow, either with sudoedit /etc/shadow, or with sudo $EDITOR /etc/shadow. Replace root's password field (all the random characters between the second and third colons :) with your own user's password field. Save. The local has the same password as you. Log in and change the password to something else.

###############################################################################################

HOW TO LIST ALL USERS ON SYSTEM WITH A HOME DIRECTORY

1. Run as Root
2. # cat /etc/passwd | grep /home*


##############################################################################################

***PRACTICE RHCSA QUESTIONS***

1. Set up an account for a new System Administrator, Jason, who has just joined your team. His full name is Jason Doe, his shell is bash, he is a member of a new group called admin. His user quota at /home is 100Mb.Jason can execute any command as root but has to supply his own password at each request.


1.Run as Root (su -)

2. # create the group admin with a gid(group ID) of 601
command: groupadd -g 601 admin

3. # add the user to group 601, allow shell access in /bin/bash, add a home directory at /home/jason, -c comment full name

command: useradd -g 601 -s /bin/bash -d /home/jason -c "Jason Doe" jason

###########################################################################################################

How to search the linux repository for a specific program name:
# use this command to search for what you think a program is called. 
apt-cache will return similar results to help you determine the exact name of the program you are looking for along with a short description.
# be sure to use a (*) at the end of the program name to include 'all' files 
when searching.

	$ sudo apt-cache search <name of program*>
	$ sudo apt-cache search Django*

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# To repeat the previous command use:

	$ sudo !!

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# To switch users use:

	$ su <name of user>
	$ su carolina
	$ su andre

# To change to Root user use:

	# 'Super user do, super user'.
	$ sudo su

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# To manage packages/install, remove, update, and upgrade  use the 'apt-get' program
# command usage: sudo apt-get <action> <file or program you want action performed on>
# example:
	$ sudo apt-get install <name of program(package)>
	$ sudo apt-get install bluefish

# To remove a program use:
	$ sudo apt-get remove <name of program(package)>
	$ sudo apt-get remove bluefish

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# To make a 'matrix' style effect on command line use this:

	$ while (true) do echo -n "your message"; done

# To kill task: ctrl z

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# To check if a program or specific package is install on your local machine use:

	$ apt-cache policy <name of program>
	$ apt-cache policy python3
	output:
		python3:
			Installed: 3.5.1-3
			Candidate: 3.5.1-3
		Version table:
			*** 3.5.1-3 500
			500 http://us.archive.ubuntu.com/ubuntu xenial/main amd64 Packages
			100 /var/lib/dpkg/status

# This will tell you if it exists on the machine and where it is installed.

# To check a known non-exsistant program output look like the following:
	$ apt-cache policy bluefish
	output:
		bluefish:
		  Installed: (none)
		  Candidate: 2.2.7-2
		Version table:
		2.2.7-2 500
		500 http://us.archive.ubuntu.com/ubuntu xenial/universe amd64 Packages

# Installed = NONE

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# FILE PERMISSIONS AND FILE OWNERSHIP
--------------------------------------

USE:  
	$ ls -l (list with 'long view) 
to show files with permissions and user/groups

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

drwxrwxr-x 2 andre andre  4096 Jun 17 17:44 Command_Line_Notes

In the order of output:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-rwxrw-r--    1    root   root 2048    Jan 13 07:11 afile.exe
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

-file permissions (drwxrwxr)
number of links (1)
owner name (root)
owner group (root)
file size (2048)
time of last modification, and
file/directory name (Jan 13 07:11 <name of file/directory>

File permissions is displayed as following:

first character is - or l or d
d-  indicates a directory.
a line(hyphen) represents a file.
l-  is a symlink (or soft link) - special type of file.

three sets of characters, three times, indicating permissions for owner, group and other:
r = readable
w = writable
x = executable

In the example out put above -rwxrw-r--, this means the line displayed is:

a regular file (displayed as -)
readable, writable and executable by owner (rwx)
readable, writable, but not executable by group (rw-)
readable but not writable or executable by other (r--)


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~



# chown = 'Change ownership' - change to a specific user or 'Root'
command:
	$ chown user:group <name of file/directory> (can also specify a direct path (usr/env<name of file>)

# chmod = 'Change permissions' - allowing what can and can not be done to a specific file or directory.

NOTE**** You can add -R to both chown, and chmod to make the command recursive to all files in a directory.

EXAMPLE:
	chown -R user:group <name of directory>

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Command syntax[edit]

	$ chmod [options] mode[,mode] file1 [file2 ...][3]

Usual implemented options include:

-R recursive, i.e. include objects in subdirectories
-f force, forge ahead with all objects even if errors occur
-v verbose, show objects processed
If a symbolic link is specified, the target object is affected. File modes directly associated with symbolic links themselves are typically never used.

To view the file mode, the ls or stat commands may be used:

$ ls -l findPhoneNumbers.sh

-rwxr-xr--  1 dgerman  staff  823 Dec 16 15:03 findPhoneNumbers.sh
$ stat -c %a findPhoneNumbers.sh

754

The r, w, and x specify the read, write, and execute access, respectively. The first character of the ls display denotes the object type;
a hyphen represents a plain file. This script can be read, written to, and executed by the owner, read and executed by other members of the staff group and can also be read by others.

Octal modes[edit]
See also: Octal notation of file system permissions

The chmod numerical format accepts up to four octal digits. 
The three rightmost digits refer to permissions for the file owner, the group, and other users.
The optional leading digit, when 4 digits are given, specifies the special setuid, setgid, and sticky flags.

Numerical permissions

#	Permission	rwx
7	read, write and execute	rwx
6	read and write	rw-
5	read and execute	r-x
4	read only	r--
3	write and execute	-wx
2	write only	-w-
1	execute only	--x
0	none	---
Numeric example[edit]
In order to permit all users who are members of the programmers group to update a file

	$ ls -l sharedFile

-rw-r--r--  1 jsmith programmers 57 Jul  3 10:13  sharedFile
	$ chmod 664 sharedFile
	$ ls -l sharedFile

-rw-rw-r--  1 jsmith programmers 57 Jul  3 10:13  sharedFile
Since the setuid, setgid and sticky bits are not specified, this is equivalent to:

	$ chmod 0664 sharedFile

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Creating New files, directories. Removing and deleting files/directories

Commands:

	$ touch - creates files
EXAMPLE:
	$ touch <nameoffile.extension_type>

	$ touch file.txt file2.txt file3.txt file.py file4.cpp file5.html file6.html
** This creates 6 new files

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

mkdir(make directory)- creates a new empty directory

cp(copy)- how to copy files to a new location

	$ cp <name of target file> <specific directory path>
	$ cp pythonNotes /Documents/tutorials/python

** WHEN INSIDE OF SPECIFIC DIRECTORY**
rm(remove)- removes files and directories
	$ rm file.txt

To remove all files from a directory but keep the directory use:
	$ rm ./*

To remove all files with a specific file extension use:
	$ rm ./*.<extension_type>
	$ rm ./*.html

** WHEN NOT IN SPECIFIC DIRECTORY **

To remove all file from a directory but keep the directory use:
	$ rm <nameofdirectory>/*
	$ rm Documents/*

To remove the directory use:
	$ rm -rf <nameofdirectory>
	$ rm -rf schoolnotes

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# To move a file use:
	$ mv filename <destination>
	$ mv file1.txt /Documents/newdir

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

FIND COMMAND***
~~~~~~~~~~~~~~~~~

# use this to find specific files, file extensions, file sizes, as well as specific directories.

Command:
	$ find . -type f -iname "*.html"
	
	# you can also specify a specific directory in the search like so
	# This command reads as: 
		find in the /etc directory all file types, ignore case and return all with a .conf extension.
	$ find /etc -type f -iname "*.conf"



$ find . -type f -iname "*.html"

find = command
. = in the current directory
-type f = the type we are searching for is 'f' for file.
-iname = means to ignore case (upper/lower) this will return all
"" = name of specific file or name of specific extension type
* = wild card for searching for ALL

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

GREP Command***
~~~~~~~~~~~~~~~~~

# Use grep to find specific items within a file

Command:
	$ grep <"what you are looking for> <name of file to look in>
	$ grep "function" file1.py

# Search all files within current directory, ignoring case(case insensitive)
	$ grep -i "function" ./*


***USE THIS COMMAND TO SEARCH FOR MOST INSTANCES WITHIN A FILE****
# Search and return with line number where instances of the search string are found.
	$ grep -i -n "config" ./*


# *** YOU CAN ALSO USE GREP IN CONJUNCTION WITH THE 'FIND' COMMAND***

	# you can run a find command as normal and at the end of the command add the flag -exec(execute)
	# -exec takes the grep command argument
	# at the end of your grep command you need to end the statement with {} +


	# this will search and find and return...
	$ find . -type f -iname "*.php" -exec grep -i -n "config" {} +

		-find in the current directory
		-all file types
		-ignoring case(case insensitive)
		-search all with .php extentions
		THEN
		- Execute grep
		- ignoring case
		- show line numbers
		- return 'config' as search
		- {} + end the execute statement

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Redirect the output of a command to a file by printing and creating a file to add output in.
	- you do this by running the command on the output source
	Example:
		$ find . -type f -size -20k -iname "*.py" -exec grep -i -n "config" {} + | tee drelog.txt

	# This searches the current directory looking for files less than 20 kilobytes with the .py extention. 
	# Then executes grep case insensitive, displaying line numbers searching for string 'config' 
	# Then it pipes the result into a file named 'drelog.txt' as well as prints the output to the screen.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# PROCESSES

# Use 'top' or 'htop' to view in real-time current processes.

# To view all background tasks use the command:
	$ ps aux

# To view a specific app or program use ps aux and pipe the app or program as the argument.
	$ ps aux | python3

# To view processor ID's (PID) use the command pgrep.
	$ pgrep chrome

# To kill a single app or process use grep to return the proccessor id and then kill it based on it's id.
	$ pgrep chrome
		output:
		1568
		3369
		1497
		7812
	# To kill a specific process use this command.
		$ kill -9 1497

# Likewise to kill all of the proccesses use:
	$ killall chrome

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

1. Why you don't have a root password

While you can create a password for the superuser account allowing you to log in as root with su, it's worth mentioning that this isn't the "Ubuntu" way of doing things. Ubuntu have specifically chosen not to give a root login and password by default for a reason. Instead, a default Ubuntu install will use sudo.

Sudo is an alternative to giving people a root password in order to perform superuser duties. In a default Ubuntu install the person who installed the OS is given "sudo" permission by default.

Anybody with "sudo" permission may perform something "as a superuser" by pre-pending sudo to their command. For instance, to run apt-get dist-upgrade as a superuser, you could use:

sudo apt-get dist-upgrade
You will see this usage of sudo pretty much anywhere you read a tutorial about Ubuntu on the web. It's an alternative to doing this.

su
apt-get dist-upgrade
exit

With sudo, you choose in advance which users have sudo access. There is no need for them to remember a root password, as they use their own password. If you have multiple users, you can revoke one's superuser access just by removing their sudo permission, without needing to change the root password and notify everyone of a new password. You can even choose which commands a user is allowed to perform using sudo and which commands are forbidden for that user. And lastly, if there is a security breach it can in some cases leave a better audit trail showing which user account was compromised.

Sudo makes it easier to perform a single command with superuser privileges. With su, you permanently drop to a superuser shell which must be exited using exit or logout. This can lead to people staying in the superuser shell for longer than necessary just because it's more convenient than logging out and in again later.

With sudo, you still have the option of opening a permanent (interactive) superuser shell with the command:

sudo su
... and this can still be done without any root password, because sudo gives superuser privileges to the su command.

And similarly, instead of su - for a login shell you can use sudo su - or even sudo -i.

However when doing so you just need to be aware that you are acting as a superuser for every command. It's a good security principle not to stay as a superuser for longer than necessary, just to lessen the possibility of accidentally causing some damage to the system (without it, you can only damage files your user owns).

Just to clarify, you can, if you choose, give the root user a password allowing logins as root as described in @Oli's answer, if you specifically want to do things this way instead. I just wanted to let you know about the Ubuntu convention of preferring sudo instead and let you know that there is an alternative.

###########################################################################################

# check this file when dealing with SELinux
# all messages will be logged here
-rw-r----- 1 syslog adm 904 May  7 19:17 /var/log/auth.log
